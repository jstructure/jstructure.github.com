<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rabbitmq on Jstructure</title>
    <link>http://jstructure.com/tags/rabbitmq/</link>
    <description>Recent content in Rabbitmq on Jstructure</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>&amp;copy; Albert Iskhakov</copyright>
    <lastBuildDate>Thu, 28 Dec 2017 09:47:28 +0300</lastBuildDate>
    
	<atom:link href="http://jstructure.com/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Повторная обработка сообщений в RabbitMQ с различным временным интервалом ожидания между повторами</title>
      <link>http://jstructure.com/post/re-execution-of-tasks-with-different-repetition-waiting-times-in-rabbitmq/</link>
      <pubDate>Thu, 28 Dec 2017 09:47:28 +0300</pubDate>
      
      <guid>http://jstructure.com/post/re-execution-of-tasks-with-different-repetition-waiting-times-in-rabbitmq/</guid>
      <description>Попробуем модифицировать решение 4, которое обеспечивает следующая схема. На входе имеем точку обмена WorkExchange, которая маршрутизирует сообщения в очередь WorkQueue. Сообщения из этой очереди принимает и обрабатывает соответствующий подписчик. В случае успешной обработки, сообщение удаляется из очереди. Это реализуется за счет подтверждения подписчиком успешной обработки сообщения (ack). Если же в процессе обработки сообщения произошла ошибка, слушатель может отклонить (reject) сообщение с указанием requeue=false, в результате чего сообщение попадет в точку доступа RetryExchange, заданной в качестве DLX для очерди WorkQueue.</description>
    </item>
    
    <item>
      <title>Повторное выполнение задач в RabbitMQ</title>
      <link>http://jstructure.com/post/re-execution-of-tasks-in-rabbitmq/</link>
      <pubDate>Sun, 12 Nov 2017 18:39:42 +0300</pubDate>
      
      <guid>http://jstructure.com/post/re-execution-of-tasks-in-rabbitmq/</guid>
      <description>Решение 1. Возврат сообщения в очередь. При возникновении ошибки на стороне подписчика можно отклонить сообщение (reject или nack с параметром requeue=true), оставив сообщение в очереди. Если очередь объявлена с параметром no_ack=false и подписчик не выполняет ack, сообщение также возвращается в очередь. При возврате сообщения в очередь ему автоматически добавляется заголовок redelivered=true. Количество возвратов при этом нельзя зафиксировать. По наличию этого заголовка можно понять только то, что сообщение уже обрабатывалось и по каким-то причинам возвратилось в очередь.</description>
    </item>
    
  </channel>
</rss>