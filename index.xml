<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jstructure</title>
    <link>http://jstructure.com/</link>
    <description>Recent content on Jstructure</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>&amp;copy; Albert Iskhakov</copyright>
    <lastBuildDate>Mon, 13 Nov 2017 09:22:29 +0300</lastBuildDate>
    
	<atom:link href="http://jstructure.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Расширение сущности Doctrine ORM</title>
      <link>http://jstructure.com/post/doctrine-entity-extending/</link>
      <pubDate>Mon, 13 Nov 2017 09:22:29 +0300</pubDate>
      
      <guid>http://jstructure.com/post/doctrine-entity-extending/</guid>
      <description>Иногда на практике бывает необходимо расширить сущности, передставляющие таблицы базы данных в коде. Например, PHP-фреймворк Symfony позволяет создавать сущности в так называемых вендорных бандлах. При необходимости в приложении, использующей этот бандл, можно расширить вендорную сущность свойствами, присущими предметной области данного приложения. В статье рассматриваются различные варианты расширения сущностей на примере Doctrine ORM с использованием языка PHP.
Наследование сущности без дополнительных аннотаций Начнем с рассмотрения простейшего случая расширения простым наследованием. Для этого создадим сущность ParentEntity и расширим его сущностью ChildEntity.</description>
    </item>
    
    <item>
      <title>Повторное выполнение задач в RabbitMQ</title>
      <link>http://jstructure.com/post/re-execution-of-tasks-in-rabbitmq/</link>
      <pubDate>Sun, 12 Nov 2017 18:39:42 +0300</pubDate>
      
      <guid>http://jstructure.com/post/re-execution-of-tasks-in-rabbitmq/</guid>
      <description>Во время выполнения задач, которые приходят подписчику из очереди в виде сообщения, возможны случаи сбоев и ошибок. При этом бывает, что задачу нужно попробовать выполнить некоторое количество раз, прежде чем удалить ее из очереди.
Решение 1. Возврат сообщения в очередь. При возникновении ошибки на стороне подписчика можно отклонить сообщение (reject или nack с параметром requeue=true), оставив сообщение в очереди. Если очередь объявлена с параметром no_ack=false и подписчик не выполняет ack, сообщение также возвращается в очередь.</description>
    </item>
    
  </channel>
</rss>