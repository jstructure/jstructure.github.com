<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jstructure</title>
    <link>http://jstructure.com/post/</link>
    <description>Recent content in Posts on Jstructure</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>&amp;copy; Albert Iskhakov</copyright>
    <lastBuildDate>Thu, 28 Dec 2017 09:47:28 +0300</lastBuildDate>
    
	<atom:link href="http://jstructure.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Повторная обработка сообщений в RabbitMQ с различным временным интервалом ожидания между повторами</title>
      <link>http://jstructure.com/post/re-execution-of-tasks-with-different-repetition-waiting-times-in-rabbitmq/</link>
      <pubDate>Thu, 28 Dec 2017 09:47:28 +0300</pubDate>
      
      <guid>http://jstructure.com/post/re-execution-of-tasks-with-different-repetition-waiting-times-in-rabbitmq/</guid>
      <description>Попробуем модифицировать решение 4, обеспечивающееся следующей схемой. На входе имеем точку обмена WorkExchange. На нее подписана очередь WorkQueue, которая отправляет сбойные сообщения в точку обмена RetryExchange (DLX). Оттуда сообщения перенаправляются в очередь RetryQueue, объявленную с параметром x-message-ttl. При дотижении заданного TTL сообщение заново публикуется в WorkExchange и опять попадает в очередь WorkQueue. Этот цикл можно повторять до достижения заданного в слушателе лимита.
Первым делом в голову приходит мысль добавления нескольких очередей для RetryExchange, с различными параметрами x-message-ttl.</description>
    </item>
    
    <item>
      <title>Расширение сущности Doctrine ORM</title>
      <link>http://jstructure.com/post/doctrine-entity-extending/</link>
      <pubDate>Mon, 13 Nov 2017 09:22:29 +0300</pubDate>
      
      <guid>http://jstructure.com/post/doctrine-entity-extending/</guid>
      <description>Наследование сущности без дополнительных аннотаций Начнем с рассмотрения простейшего случая расширения простым наследованием. Для этого создадим сущность ParentEntity и расширим его сущностью ChildEntity. В данном примере не будем использовать специальные аннотации Doctrine, используемые для расширения сущностей.
&amp;lt;?php // src/DataLayerBundle/Entity/ParentEntity.php namespace DataLayerBundle\Entity; use Doctrine\ORM\Mapping as ORM; /** * @ORM\Table(name=&amp;quot;parent_entity&amp;quot;) */ class ParentEntity { /** * @var int * * @ORM\Column(name=&amp;quot;id&amp;quot;, type=&amp;quot;integer&amp;quot;) * @ORM\Id * @ORM\GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;) */ protected $id; /** * @var string * * @ORM\Column(name=&amp;quot;name&amp;quot;, type=&amp;quot;string&amp;quot;, length=255) */ protected $name; }  Сущность ParentEntity содержит идентификатор и свойсво $name, которое является текстовым.</description>
    </item>
    
    <item>
      <title>Повторное выполнение задач в RabbitMQ</title>
      <link>http://jstructure.com/post/re-execution-of-tasks-in-rabbitmq/</link>
      <pubDate>Sun, 12 Nov 2017 18:39:42 +0300</pubDate>
      
      <guid>http://jstructure.com/post/re-execution-of-tasks-in-rabbitmq/</guid>
      <description>Решение 1. Возврат сообщения в очередь. При возникновении ошибки на стороне подписчика можно отклонить сообщение (reject или nack с параметром requeue=true), оставив сообщение в очереди. Если очередь объявлена с параметром no_ack=false и подписчик не выполняет ack, сообщение также возвращается в очередь. При возврате сообщения в очередь ему автоматически добавляется заголовок redelivered=true. Количество возвратов при этом нельзя зафиксировать. По наличию этого заголовка можно понять только то, что сообщение уже обрабатывалось и по каким-то причинам возвратилось в очередь.</description>
    </item>
    
  </channel>
</rss>